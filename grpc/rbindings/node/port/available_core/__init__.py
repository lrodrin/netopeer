# -*- coding: utf-8 -*-
from collections import OrderedDict

import six
from pyangbind.lib.base import PybindBase
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import YANGListType

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
    import builtins as __builtin__

    long = int
elif six.PY2:
    import __builtin__

from . import available_frequency_slot
from . import occupied_frequency_slot


class available_core(PybindBase):
    """
    This class was auto-generated by the PythonClass plugin for PYANG
    from YANG module node-topology - based on the path /node/port/available-core. Each member element of
    the container is represented as a class variable - with a specific
    YANG type.
    """
    __slots__ = ('_path_helper', '_extmethods', '__core_id', '__available_frequency_slot', '__occupied_frequency_slot',)

    _yang_name = 'available-core'

    _pybind_generated_by = 'container'

    def __init__(self, *args, **kwargs):

        self._path_helper = False

        self._extmethods = False
        self.__core_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="core-id", parent=self,
                                      path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                                      is_keyval=True, namespace='urn:node-topology', defining_module='node-topology',
                                      yang_type='string', is_config=True)
        self.__available_frequency_slot = YANGDynClass(
            base=YANGListType("slot_id", available_frequency_slot.available_frequency_slot,
                              yang_name="available-frequency-slot", parent=self, is_container='list',
                              user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id', extensions=None),
            is_container='list', yang_name="available-frequency-slot", parent=self, path_helper=self._path_helper,
            extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:node-topology',
            defining_module='node-topology', yang_type='list', is_config=True)
        self.__occupied_frequency_slot = YANGDynClass(
            base=YANGListType("slot_id", occupied_frequency_slot.occupied_frequency_slot,
                              yang_name="occupied-frequency-slot", parent=self, is_container='list', user_ordered=False,
                              path_helper=self._path_helper, yang_keys='slot-id', extensions=None), is_container='list',
            yang_name="occupied-frequency-slot", parent=self, path_helper=self._path_helper,
            extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:node-topology',
            defining_module='node-topology', yang_type='list', is_config=True)

        load = kwargs.pop("load", None)
        if args:
            if len(args) > 1:
                raise TypeError("cannot create a YANG container with >1 argument")
            all_attr = True
            for e in self._pyangbind_elements:
                if not hasattr(args[0], e):
                    all_attr = False
                    break
            if not all_attr:
                raise ValueError("Supplied object did not have the correct attributes")
            for e in self._pyangbind_elements:
                nobj = getattr(args[0], e)
                if nobj._changed() is False:
                    continue
                setmethod = getattr(self, "_set_%s" % e)
                if load is None:
                    setmethod(getattr(args[0], e))
                else:
                    setmethod(getattr(args[0], e), load=load)

    def _path(self):
        if hasattr(self, "_parent"):
            return self._parent._path() + [self._yang_name]
        else:
            return [u'node', u'port', u'available-core']

    def _get_core_id(self):
        """
        Getter method for core_id, mapped from YANG variable /node/port/available_core/core_id (string)
        """
        return self.__core_id

    def _set_core_id(self, v, load=False):
        """
        Setter method for core_id, mapped from YANG variable /node/port/available_core/core_id (string)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_core_id is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_core_id() directly.
        """
        parent = getattr(self, "_parent", None)
        if parent is not None and load is False:
            raise AttributeError("Cannot set keys directly when" +
                                 " within an instantiated list")

        if hasattr(v, "_utype"):
            v = v._utype(v)
        try:
            t = YANGDynClass(v, base=six.text_type, is_leaf=True, yang_name="core-id", parent=self,
                             path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                             is_keyval=True, namespace='urn:node-topology', defining_module='node-topology',
                             yang_type='string', is_config=True)
        except (TypeError, ValueError):
            raise ValueError({
                'error-string': """core_id must be of a type compatible with string""",
                'defined-type': "string",
                'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="core-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:node-topology', defining_module='node-topology', yang_type='string', is_config=True)""",
            })

        self.__core_id = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_core_id(self):
        self.__core_id = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="core-id", parent=self,
                                      path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                                      is_keyval=True, namespace='urn:node-topology', defining_module='node-topology',
                                      yang_type='string', is_config=True)

    def _get_available_frequency_slot(self):
        """
        Getter method for available_frequency_slot, mapped from YANG variable /node/port/available_core/available_frequency_slot (list)
        """
        return self.__available_frequency_slot

    def _set_available_frequency_slot(self, v, load=False):
        """
        Setter method for available_frequency_slot, mapped from YANG variable /node/port/available_core/available_frequency_slot (list)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_available_frequency_slot is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_available_frequency_slot() directly.
        """
        if hasattr(v, "_utype"):
            v = v._utype(v)
        try:
            t = YANGDynClass(v, base=YANGListType("slot_id", available_frequency_slot.available_frequency_slot,
                                                  yang_name="available-frequency-slot", parent=self,
                                                  is_container='list', user_ordered=False,
                                                  path_helper=self._path_helper, yang_keys='slot-id', extensions=None),
                             is_container='list', yang_name="available-frequency-slot", parent=self,
                             path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                             extensions=None, namespace='urn:node-topology', defining_module='node-topology',
                             yang_type='list', is_config=True)
        except (TypeError, ValueError):
            raise ValueError({
                'error-string': """available_frequency_slot must be of a type compatible with list""",
                'defined-type': "list",
                'generated-type': """YANGDynClass(base=YANGListType("slot_id",available_frequency_slot.available_frequency_slot, yang_name="available-frequency-slot", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id', extensions=None), is_container='list', yang_name="available-frequency-slot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:node-topology', defining_module='node-topology', yang_type='list', is_config=True)""",
            })

        self.__available_frequency_slot = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_available_frequency_slot(self):
        self.__available_frequency_slot = YANGDynClass(
            base=YANGListType("slot_id", available_frequency_slot.available_frequency_slot,
                              yang_name="available-frequency-slot", parent=self, is_container='list',
                              user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id', extensions=None),
            is_container='list', yang_name="available-frequency-slot", parent=self, path_helper=self._path_helper,
            extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:node-topology',
            defining_module='node-topology', yang_type='list', is_config=True)

    def _get_occupied_frequency_slot(self):
        """
        Getter method for occupied_frequency_slot, mapped from YANG variable /node/port/available_core/occupied_frequency_slot (list)
        """
        return self.__occupied_frequency_slot

    def _set_occupied_frequency_slot(self, v, load=False):
        """
        Setter method for occupied_frequency_slot, mapped from YANG variable /node/port/available_core/occupied_frequency_slot (list)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_occupied_frequency_slot is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_occupied_frequency_slot() directly.
        """
        if hasattr(v, "_utype"):
            v = v._utype(v)
        try:
            t = YANGDynClass(v, base=YANGListType("slot_id", occupied_frequency_slot.occupied_frequency_slot,
                                                  yang_name="occupied-frequency-slot", parent=self, is_container='list',
                                                  user_ordered=False, path_helper=self._path_helper,
                                                  yang_keys='slot-id', extensions=None), is_container='list',
                             yang_name="occupied-frequency-slot", parent=self, path_helper=self._path_helper,
                             extmethods=self._extmethods, register_paths=True, extensions=None,
                             namespace='urn:node-topology', defining_module='node-topology', yang_type='list',
                             is_config=True)
        except (TypeError, ValueError):
            raise ValueError({
                'error-string': """occupied_frequency_slot must be of a type compatible with list""",
                'defined-type': "list",
                'generated-type': """YANGDynClass(base=YANGListType("slot_id",occupied_frequency_slot.occupied_frequency_slot, yang_name="occupied-frequency-slot", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id', extensions=None), is_container='list', yang_name="occupied-frequency-slot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:node-topology', defining_module='node-topology', yang_type='list', is_config=True)""",
            })

        self.__occupied_frequency_slot = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_occupied_frequency_slot(self):
        self.__occupied_frequency_slot = YANGDynClass(
            base=YANGListType("slot_id", occupied_frequency_slot.occupied_frequency_slot,
                              yang_name="occupied-frequency-slot", parent=self, is_container='list', user_ordered=False,
                              path_helper=self._path_helper, yang_keys='slot-id', extensions=None), is_container='list',
            yang_name="occupied-frequency-slot", parent=self, path_helper=self._path_helper,
            extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:node-topology',
            defining_module='node-topology', yang_type='list', is_config=True)

    core_id = __builtin__.property(_get_core_id, _set_core_id)
    available_frequency_slot = __builtin__.property(_get_available_frequency_slot, _set_available_frequency_slot)
    occupied_frequency_slot = __builtin__.property(_get_occupied_frequency_slot, _set_occupied_frequency_slot)

    _pyangbind_elements = OrderedDict([('core_id', core_id), ('available_frequency_slot', available_frequency_slot),
                                       ('occupied_frequency_slot', occupied_frequency_slot), ])
