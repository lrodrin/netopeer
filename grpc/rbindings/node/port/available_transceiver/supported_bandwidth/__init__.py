# -*- coding: utf-8 -*-
from collections import OrderedDict

import six
from pyangbind.lib.base import PybindBase
from pyangbind.lib.yangtypes import YANGDynClass

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
    import builtins as __builtin__

    long = int
elif six.PY2:
    import __builtin__


class supported_bandwidth(PybindBase):
    """
    This class was auto-generated by the PythonClass plugin for PYANG
    from YANG module node-topology - based on the path /node/port/available-transceiver/supported-bandwidth. Each member element of
    the container is represented as a class variable - with a specific
    YANG type.
    """
    __slots__ = ('_path_helper', '_extmethods', '__max_bw', '__min_bw',)

    _yang_name = 'supported-bandwidth'

    _pybind_generated_by = 'container'

    def __init__(self, *args, **kwargs):

        self._path_helper = False

        self._extmethods = False
        self.__min_bw = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="min-bw", parent=self,
                                     path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                                     namespace='urn:node-topology', defining_module='node-topology', yang_type='string',
                                     is_config=True)
        self.__max_bw = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="max-bw", parent=self,
                                     path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                                     namespace='urn:node-topology', defining_module='node-topology', yang_type='string',
                                     is_config=True)

        load = kwargs.pop("load", None)
        if args:
            if len(args) > 1:
                raise TypeError("cannot create a YANG container with >1 argument")
            all_attr = True
            for e in self._pyangbind_elements:
                if not hasattr(args[0], e):
                    all_attr = False
                    break
            if not all_attr:
                raise ValueError("Supplied object did not have the correct attributes")
            for e in self._pyangbind_elements:
                nobj = getattr(args[0], e)
                if nobj._changed() is False:
                    continue
                setmethod = getattr(self, "_set_%s" % e)
                if load is None:
                    setmethod(getattr(args[0], e))
                else:
                    setmethod(getattr(args[0], e), load=load)

    def _path(self):
        if hasattr(self, "_parent"):
            return self._parent._path() + [self._yang_name]
        else:
            return [u'node', u'port', u'available-transceiver', u'supported-bandwidth']

    def _get_max_bw(self):
        """
        Getter method for max_bw, mapped from YANG variable /node/port/available_transceiver/supported_bandwidth/max_bw (string)
        """
        return self.__max_bw

    def _set_max_bw(self, v, load=False):
        """
        Setter method for max_bw, mapped from YANG variable /node/port/available_transceiver/supported_bandwidth/max_bw (string)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_max_bw is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_max_bw() directly.
        """
        if hasattr(v, "_utype"):
            v = v._utype(v)
        try:
            t = YANGDynClass(v, base=six.text_type, is_leaf=True, yang_name="max-bw", parent=self,
                             path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                             namespace='urn:node-topology', defining_module='node-topology', yang_type='string',
                             is_config=True)
        except (TypeError, ValueError):
            raise ValueError({
                'error-string': """max_bw must be of a type compatible with string""",
                'defined-type': "string",
                'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="max-bw", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:node-topology', defining_module='node-topology', yang_type='string', is_config=True)""",
            })

        self.__max_bw = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_max_bw(self):
        self.__max_bw = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="max-bw", parent=self,
                                     path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                                     namespace='urn:node-topology', defining_module='node-topology', yang_type='string',
                                     is_config=True)

    def _get_min_bw(self):
        """
        Getter method for min_bw, mapped from YANG variable /node/port/available_transceiver/supported_bandwidth/min_bw (string)
        """
        return self.__min_bw

    def _set_min_bw(self, v, load=False):
        """
        Setter method for min_bw, mapped from YANG variable /node/port/available_transceiver/supported_bandwidth/min_bw (string)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_min_bw is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_min_bw() directly.
        """
        if hasattr(v, "_utype"):
            v = v._utype(v)
        try:
            t = YANGDynClass(v, base=six.text_type, is_leaf=True, yang_name="min-bw", parent=self,
                             path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                             namespace='urn:node-topology', defining_module='node-topology', yang_type='string',
                             is_config=True)
        except (TypeError, ValueError):
            raise ValueError({
                'error-string': """min_bw must be of a type compatible with string""",
                'defined-type': "string",
                'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="min-bw", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:node-topology', defining_module='node-topology', yang_type='string', is_config=True)""",
            })

        self.__min_bw = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_min_bw(self):
        self.__min_bw = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="min-bw", parent=self,
                                     path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                                     namespace='urn:node-topology', defining_module='node-topology', yang_type='string',
                                     is_config=True)

    max_bw = __builtin__.property(_get_max_bw, _set_max_bw)
    min_bw = __builtin__.property(_get_min_bw, _set_min_bw)

    _pyangbind_elements = OrderedDict([('max_bw', max_bw), ('min_bw', min_bw), ])
