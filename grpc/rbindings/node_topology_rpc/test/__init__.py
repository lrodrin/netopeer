# -*- coding: utf-8 -*-
from collections import OrderedDict

import six
from pyangbind.lib.base import PybindBase
from pyangbind.lib.yangtypes import YANGDynClass

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
    import builtins as __builtin__

    long = int
elif six.PY2:
    import __builtin__

from . import input
from . import output


class test(PybindBase):
    """
    This class was auto-generated by the PythonClass plugin for PYANG
    from YANG module node-topology - based on the path /node_topology_rpc/test. Each member element of
    the container is represented as a class variable - with a specific
    YANG type.
    """
    __slots__ = ('_path_helper', '_extmethods', '__input', '__output',)

    _yang_name = 'test'

    _pybind_generated_by = 'container'

    def __init__(self, *args, **kwargs):

        self._path_helper = False

        self._extmethods = False
        self.__input = YANGDynClass(base=input.input, is_leaf=True, yang_name="input", parent=self,
                                    path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False,
                                    extensions=None, namespace='urn:node-topology', defining_module='node-topology',
                                    yang_type='input', is_config=True)
        self.__output = YANGDynClass(base=output.output, is_leaf=True, yang_name="output", parent=self,
                                     path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False,
                                     extensions=None, namespace='urn:node-topology', defining_module='node-topology',
                                     yang_type='output', is_config=True)

        load = kwargs.pop("load", None)
        if args:
            if len(args) > 1:
                raise TypeError("cannot create a YANG container with >1 argument")
            all_attr = True
            for e in self._pyangbind_elements:
                if not hasattr(args[0], e):
                    all_attr = False
                    break
            if not all_attr:
                raise ValueError("Supplied object did not have the correct attributes")
            for e in self._pyangbind_elements:
                nobj = getattr(args[0], e)
                if nobj._changed() is False:
                    continue
                setmethod = getattr(self, "_set_%s" % e)
                if load is None:
                    setmethod(getattr(args[0], e))
                else:
                    setmethod(getattr(args[0], e), load=load)

    def _path(self):
        if hasattr(self, "_parent"):
            return self._parent._path() + [self._yang_name]
        else:
            return [u'node_topology_rpc', u'test']

    def _get_input(self):
        """
        Getter method for input, mapped from YANG variable /node_topology_rpc/test/input (input)
        """
        return self.__input

    def _set_input(self, v, load=False):
        """
        Setter method for input, mapped from YANG variable /node_topology_rpc/test/input (input)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_input is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_input() directly.
        """
        if hasattr(v, "_utype"):
            v = v._utype(v)
        try:
            t = YANGDynClass(v, base=input.input, is_leaf=True, yang_name="input", parent=self,
                             path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False,
                             extensions=None, namespace='urn:node-topology', defining_module='node-topology',
                             yang_type='input', is_config=True)
        except (TypeError, ValueError):
            raise ValueError({
                'error-string': """input must be of a type compatible with input""",
                'defined-type': "node-topology:input",
                'generated-type': """YANGDynClass(base=input.input, is_leaf=True, yang_name="input", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:node-topology', defining_module='node-topology', yang_type='input', is_config=True)""",
            })

        self.__input = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_input(self):
        self.__input = YANGDynClass(base=input.input, is_leaf=True, yang_name="input", parent=self,
                                    path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False,
                                    extensions=None, namespace='urn:node-topology', defining_module='node-topology',
                                    yang_type='input', is_config=True)

    def _get_output(self):
        """
        Getter method for output, mapped from YANG variable /node_topology_rpc/test/output (output)
        """
        return self.__output

    def _set_output(self, v, load=False):
        """
        Setter method for output, mapped from YANG variable /node_topology_rpc/test/output (output)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_output is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_output() directly.
        """
        if hasattr(v, "_utype"):
            v = v._utype(v)
        try:
            t = YANGDynClass(v, base=output.output, is_leaf=True, yang_name="output", parent=self,
                             path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False,
                             extensions=None, namespace='urn:node-topology', defining_module='node-topology',
                             yang_type='output', is_config=True)
        except (TypeError, ValueError):
            raise ValueError({
                'error-string': """output must be of a type compatible with output""",
                'defined-type': "node-topology:output",
                'generated-type': """YANGDynClass(base=output.output, is_leaf=True, yang_name="output", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:node-topology', defining_module='node-topology', yang_type='output', is_config=True)""",
            })

        self.__output = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_output(self):
        self.__output = YANGDynClass(base=output.output, is_leaf=True, yang_name="output", parent=self,
                                     path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False,
                                     extensions=None, namespace='urn:node-topology', defining_module='node-topology',
                                     yang_type='output', is_config=True)

    input = __builtin__.property(_get_input, _set_input)
    output = __builtin__.property(_get_output, _set_output)

    _pyangbind_elements = OrderedDict([('input', input), ('output', output), ])
