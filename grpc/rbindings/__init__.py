# -*- coding: utf-8 -*-
from collections import OrderedDict

import six
from pyangbind.lib.base import PybindBase
from pyangbind.lib.yangtypes import YANGDynClass

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
    import builtins as __builtin__

    long = int
elif six.PY2:
    import __builtin__

from . import node


class node_topology(PybindBase):
    """
    This class was auto-generated by the PythonClass plugin for PYANG
    from YANG module node-topology - based on the path /node-topology. Each member element of
    the container is represented as a class variable - with a specific
    YANG type.

    YANG Description: Latest update to node topology SDM YANG data model.
    """
    __slots__ = ('_path_helper', '_extmethods', '__node',)

    _yang_name = 'node-topology'

    _pybind_generated_by = 'container'

    def __init__(self, *args, **kwargs):

        self._path_helper = False

        self._extmethods = False
        self.__node = YANGDynClass(base=node.node, is_container='container', yang_name="node", parent=self,
                                   path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                                   extensions=None, namespace='urn:node-topology', defining_module='node-topology',
                                   yang_type='container', is_config=True)

        load = kwargs.pop("load", None)
        if args:
            if len(args) > 1:
                raise TypeError("cannot create a YANG container with >1 argument")
            all_attr = True
            for e in self._pyangbind_elements:
                if not hasattr(args[0], e):
                    all_attr = False
                    break
            if not all_attr:
                raise ValueError("Supplied object did not have the correct attributes")
            for e in self._pyangbind_elements:
                nobj = getattr(args[0], e)
                if nobj._changed() is False:
                    continue
                setmethod = getattr(self, "_set_%s" % e)
                if load is None:
                    setmethod(getattr(args[0], e))
                else:
                    setmethod(getattr(args[0], e), load=load)

    def _path(self):
        if hasattr(self, "_parent"):
            return self._parent._path() + [self._yang_name]
        else:
            return []

    def _get_node(self):
        """
        Getter method for node, mapped from YANG variable /node (container)
        """
        return self.__node

    def _set_node(self, v, load=False):
        """
        Setter method for node, mapped from YANG variable /node (container)
        If this variable is read-only (config: false) in the
        source YANG file, then _set_node is considered as a private
        method. Backends looking to populate this variable should
        do so via calling thisObj._set_node() directly.
        """
        if hasattr(v, "_utype"):
            v = v._utype(v)
        try:
            t = YANGDynClass(v, base=node.node, is_container='container', yang_name="node", parent=self,
                             path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                             extensions=None, namespace='urn:node-topology', defining_module='node-topology',
                             yang_type='container', is_config=True)
        except (TypeError, ValueError):
            raise ValueError({
                'error-string': """node must be of a type compatible with container""",
                'defined-type': "container",
                'generated-type': """YANGDynClass(base=node.node, is_container='container', yang_name="node", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='urn:node-topology', defining_module='node-topology', yang_type='container', is_config=True)""",
            })

        self.__node = t
        if hasattr(self, '_set'):
            self._set()

    def _unset_node(self):
        self.__node = YANGDynClass(base=node.node, is_container='container', yang_name="node", parent=self,
                                   path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True,
                                   extensions=None, namespace='urn:node-topology', defining_module='node-topology',
                                   yang_type='container', is_config=True)

    node = __builtin__.property(_get_node, _set_node)

    _pyangbind_elements = OrderedDict([('node', node), ])
